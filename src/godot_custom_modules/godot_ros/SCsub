#!/usr/bin/env python

# SCsub
import os

from pathlib import Path

Import('env')

cpp_version = "-std=c++17"
# If you are using a different ROS distribution, change the ros_distro variable.
ros_distro = "rolling"
ros_path = "/opt/ros/" + ros_distro
ros_lib_path = ros_path +"/lib"
# ros_dir = "~/Documents/code/asr_sdm_radxa_ws/install"

# include package list
ros_libs = ["rclcpp",
             "rcl",
             "rcl_yaml_param_parser",
             "rcutils",
             "rcpputils",
             "rmw",
             "rmw_implementation",
             "tracetools",
             "ament_index_cpp",
             "rosidl_typesupport_cpp",
             "rosidl_typesupport_c",
             "rosidl_runtime_c",
             "console_bridge",
             "rcl_action",
             "rclcpp_action",
             "tf2",
             "tf2_ros",
             "liblibstatistics_collector",
            #  "pcl_ros_tf", 
             "rcl_interfaces__rosidl_typesupport_c",
             "rcl_interfaces__rosidl_generator_c",
             "rcl_logging_interface",
             "rcl_logging_spdlog",
             "builtin_interfaces__rosidl_generator_c"]#,
            #  "lanelet2_core",
            #  "lanelet2_extension_lib"]
msg_pkgs = ["tf2_msgs",
            "actionlib_msgs",
            "action_msgs",
            "rcl_interfaces",
            "visualization_msgs",
            "statistics_msgs",
            "sensor_msgs",
            "std_msgs",
            "rosgraph_msgs"]#,
            # "autoware_planning_msgs",
            # "autoware_map_msgs",
            # "autoware_perception_msgs",
            # "autoware_vehicle_msgs"]

ros_blacklist_pkgs = ["idl", "dds", "mimick"]
ros_pkgs = set([f for f in os.listdir(ros_path+"/include") if os.path.isdir(os.path.join(ros_path+"/include", f))]) ^ set(ros_blacklist_pkgs)
ros_include_paths = list(map(lambda pkg: ros_path +"/include/" + pkg, ros_pkgs))

def getIncludeDirs(base_path: str):
    dirs = []
    for root, subdirs, files in os.walk(base_path):
        if "include" in subdirs:
            split = root.split("/")
            p = root + "/include/" + split[-1]
            dirs.append(p)
    return dirs

def getLibs(base_path: str):
    if not base_path.endswith("/"):
        base_path += "/"
    libs = []
    dirs = []
    for root, subdirs, files in os.walk(base_path):
        newlib = False
        for name in files:
            if (name.endswith(".so") or name.endswith(".a")) and name.startswith("lib"):
                libs.append(Path(name).name)
                newlib = True
        if newlib:
            dirs.append(root)
    return dirs, libs


# ros_includes = getIncludeDirs(ros_dir)
# ros_lib_path, ros_libs = getLibs(ros_dir)
#ros_libs = getLibNames(ros_lib_path)

# Add all cpp files to the build
env.add_source_files(env.modules_sources, "src/demos/*.cpp")
env.add_source_files(env.modules_sources, "*.cpp")

# These paths are relative to /modules/ros if they are not absolute
env.Append(CPPPATH=["include",
                    ros_path + "/include"]
                    + ros_include_paths)

# LIBPATH and LIBS need to be set on the real "env" (not the clone)
# to link the specified libraries to the Godot executable.

# This is a path relative to /modules where your .a libraries reside.
# If you are compiling the module externally (not in the godot source tree),
# these will need to be full paths.
env.Append(LIBPATH=[ros_lib_path])

# ROS needs c++ version compilier flag
# env.Append(CCFLAGS=[cpp_version])
env.Append(CCFLAGS=[cpp_version, "-fexceptions"])

msg_gen_prefix = "__rosidl_typesupport_cpp"
msg_libs = list(map(lambda pkg: pkg + msg_gen_prefix, msg_pkgs))

# Check with the documentation of the external library to see which library
# files should be included/linked.
env.Append(LIBS=ros_libs)
